{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","Add","useParams","num1","num2","Number","Minus","Multiply","Divide","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","to","path","children","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRA2CA,SAASA,IACL,OAAO,oCAGX,SAASC,IAAO,IAAD,EACQC,cAAdC,EADM,EACNA,KAAMC,EADA,EACAA,KAEX,OACI,6BACI,4BAAKD,EAAL,MAAcC,EAAd,MAAuBC,OAAOF,GAAQE,OAAOD,KAKzD,SAASE,IAAS,IAAD,EACMJ,cAAdC,EADQ,EACRA,KAAMC,EADE,EACFA,KAEX,OACI,6BACI,4BAAKD,EAAL,MAAcC,EAAd,MAAuBC,OAAOF,GAAQE,OAAOD,KAKzD,SAASG,IAAY,IAAD,EACGL,cAAdC,EADW,EACXA,KAAMC,EADK,EACLA,KAEX,OACI,6BACI,4BAAKD,EAAL,MAAcC,EAAd,MAAuBC,OAAOF,GAAQE,OAAOD,KAKzD,SAASI,IAAU,IAAD,EACKN,cAAdC,EADS,EACTA,KAAMC,EADG,EACHA,KAEX,OACI,6BACI,4BAAKD,EAAL,MAAcC,EAAd,MAAuBC,OAAOF,GAAQE,OAAOD,KCtErCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFDD,WACX,OACI,kBAAC,IAAD,CAAQC,SAAUC,qBACd,6BACI,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,QAAT,QAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,aAAT,aAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,WAAT,aAOZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,mBAAmBC,SAAU,kBAACnB,EAAD,QACzC,kBAAC,IAAD,CAAOkB,KAAK,qBAAqBC,SAAU,kBAACd,EAAD,QAC3C,kBAAC,IAAD,CAAOa,KAAK,wBAAwBC,SAAU,kBAACb,EAAD,QAC9C,kBAAC,IAAD,CAAOY,KAAK,sBAAsBC,SAAU,kBAACZ,EAAD,QAC5C,kBAAC,IAAD,CAAOW,KAAK,IAAIE,OAAK,EAACD,SAAUpB,SE9BpC,MAASsB,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e22f3b07.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Link, Route, Switch, useParams} from \"react-router-dom\";\r\n\r\n\r\nexport default function App() {\r\n    return (\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n            <div>\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <Link to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/add\">Add</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/minus\">Minus</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/multiply\">Multiply</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/divide\">Divide</Link>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n\r\n                {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n                <Switch>\r\n                    <Route path=\"/add/:num1/:num2\" children={<Add/>}/>\r\n                    <Route path=\"/minus/:num1/:num2\" children={<Minus/>}/>\r\n                    <Route path=\"/multiply/:num1/:num2\" children={<Multiply/>}/>\r\n                    <Route path=\"/divide/:num1/:num2\" children={<Divide/>}/>\r\n                    <Route path=\"/\" exact children={Home}/>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nfunction Home() {\r\n    return <h2>Home</h2>;\r\n}\r\n\r\nfunction Add() {\r\n    let {num1, num2} = useParams();\r\n\r\n    return (\r\n        <div>\r\n            <h3>{num1} + {num2} = {Number(num1) + Number(num2)}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Minus() {\r\n    let {num1, num2} = useParams();\r\n\r\n    return (\r\n        <div>\r\n            <h3>{num1} - {num2} = {Number(num1) - Number(num2)}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Multiply() {\r\n    let {num1, num2} = useParams();\r\n\r\n    return (\r\n        <div>\r\n            <h3>{num1} * {num2} = {Number(num1) * Number(num2)}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Divide() {\r\n    let {num1, num2} = useParams();\r\n\r\n    return (\r\n        <div>\r\n            <h3>{num1} / {num2} = {Number(num1) / Number(num2)}</h3>\r\n        </div>\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}